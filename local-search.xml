<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>势能分析</title>
    <link href="/2021/06/19/shi-neng-fen-xi/"/>
    <url>/2021/06/19/shi-neng-fen-xi/</url>
    
    <content type="html"><![CDATA[<p>Splay 和 LCT 的复杂度证明：<a href="https://www.cnblogs.com/zhouzhendong/p/JunTanFenXi.html">均摊分析 学习笔记 - zzd233 - 博客园 (cnblogs.com)</a></p><h2 id="AAA-Tree-的复杂度证明"><a href="#AAA-Tree-的复杂度证明" class="headerlink" title="AAA Tree 的复杂度证明"></a>AAA Tree 的复杂度证明</h2><p>AAA Tree 相比 LCT 多出了虚 Splay 中旋转的复杂度，只需要证明这一部分的复杂度为均摊 $O(\log n)$ 即可。</p><p>定义虚 Splay 中节点的势能函数为 $r(x)=\log(\text{$x$ 在虚 Splay 中子树 size + $x$ 在实 Splay 中的子树所有 size 之和})$，因为 $r(x)\le\log n$，所以整棵树的势能 $\le n\log n$。</p><p>接下来是 access 操作的复杂度证明：</p><p>可以发现 access 的过程中虚 Splay 和实 Splay 中的 splay 交替进行，类似这样：</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210619135222.png"></p><p>那么其中虚 Splay 的势能变化量即为 $(r(b)-r(a))+(r(d)-r(c))+(r(f)-r(e))$，注意到我们定义的势能函数包括实 Splay 中子树的所有 size 之和，所以 $r(c)&gt;r(b),(r(e)&gt;r(d))$，那么全部消去，即得 $r(f)-r(a) \le \log n$ ，所以一次 access 中 splay 操作的势能变化量之和为均摊 $O(\log n)$。</p><p>access 中的换右儿子操作应该分类处理：当要换上的右儿子为空时，仅将当前的右儿子加入虚 Splay 中，一次 access 仅有一次加入操作；当当前右儿子为空时，仅将要换上的右儿子从虚 Splay 中删除；当当前右儿子和要换上的右儿子都非空时，交换两个节点即可。</p><p>右儿子为空即为链尾，且操作后链尾数量 -1，而链尾数量仅可通过 link 操作每次增加 1，所以 del 次数即为 link 次数。</p><p>综上 AAA Tree 的 access 复杂度为均摊 $O(\log n)$，其他操作显然也为 $O(\log n)$。</p><p>所以 AAA Tree 的复杂度为 $O((n+m)\log n)$。</p><p>一种五叉 AAA Tree 实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 5 叉 AAA Tree</span><br><span class="hljs-comment">// 常数和 3 叉 AAA Tree 相近但不需要 2 倍空间，代码长度相近 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ldb;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// cannot input -2147483648</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, c = <span class="hljs-built_in">gc</span>();<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(; !<span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(; <span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) x = x * <span class="hljs-number">10</span> + (c &amp; <span class="hljs-number">15</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-number">1u</span> &lt;&lt; <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tag</span> &#123;</span><br><span class="hljs-keyword">int</span> mul, add;<br><span class="hljs-built_in">Tag</span>(): <span class="hljs-built_in">mul</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-built_in">Tag</span>(<span class="hljs-keyword">int</span> mul, <span class="hljs-keyword">int</span> add): <span class="hljs-built_in">mul</span>(mul), <span class="hljs-built_in">add</span>(add) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">exis</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (mul != <span class="hljs-number">1</span> || add != <span class="hljs-number">0</span>); &#125; <br>&#125;;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l * r.mul + r.add;<br>&#125;<br><span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Tag <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tag</span>(l.mul * r.mul, l.add * r.mul + r.add);<br>&#125;<br>Tag&amp; <span class="hljs-keyword">operator</span> += (Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span> &#123;</span><br><span class="hljs-keyword">int</span> siz, sum, mn, mx;<br><span class="hljs-built_in">Data</span>(): <span class="hljs-built_in">siz</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">mn</span>(INF), <span class="hljs-built_in">mx</span>(-INF - <span class="hljs-number">1</span>) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> x): <span class="hljs-built_in">siz</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>(x), <span class="hljs-built_in">mn</span>(x), <span class="hljs-built_in">mx</span>(x) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> siz, <span class="hljs-keyword">int</span> sum, <span class="hljs-keyword">int</span> mn, <span class="hljs-keyword">int</span> mx): <span class="hljs-built_in">siz</span>(siz), <span class="hljs-built_in">sum</span>(sum), <span class="hljs-built_in">mn</span>(mn), <span class="hljs-built_in">mx</span>(mx) &#123;&#125;<br>&#125;;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz + r.siz, l.sum + r.sum, <span class="hljs-built_in">min</span>(l.mn, r.mn), <span class="hljs-built_in">max</span>(l.mx, r.mx));<br>&#125;<br>Data&amp; <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz, l.sum * r.mul + l.siz * r.add, l.mn + r, l.mx + r);<br>&#125;<br>Data <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">if</span>(!l.siz) <span class="hljs-keyword">return</span> l;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><br><span class="hljs-keyword">int</span> fa[N], ch[N][<span class="hljs-number">5</span>], val[N], rev[N];<br>Data datr[N], datv[N];<br>Tag tagr[N], tagv[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls(x) ch[x][0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs(x) ch[x][1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vls(x) ch[x][2]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vrs(x) ch[x][3]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vs(x) ch[x][4]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sum(x) (datr[x] + datv[x])</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x != 0</span><br>datr[x] = datr[<span class="hljs-built_in">ls</span>(x)] + datr[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">Data</span>(val[x]);<br>datv[x] = datv[<span class="hljs-built_in">ls</span>(x)] + datv[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vls</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vrs</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>rev[x] ^= <span class="hljs-number">1</span>;<br><span class="hljs-built_in">swap</span>(<span class="hljs-built_in">ls</span>(x), <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_real</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>val[x] += v;<br>datr[x] += v;<br>tagr[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_virt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>datv[x] += v;<br>tagv[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_all</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">push_real</span>(x, v);<br><span class="hljs-built_in">push_virt</span>(x, v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(rev[x]) &#123;<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">ls</span>(x));<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">rs</span>(x));<br>rev[x] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tagr[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">ls</span>(x), tagr[x]);<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">rs</span>(x), tagr[x]);<br>tagr[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(tagv[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">ls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">rs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vrs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), tagv[x]);<br>tagv[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">notroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (ch[fa[x]][k] == x || ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br><span class="hljs-keyword">if</span>(ch[fa[x]][i] == x) <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that fa[x] != 0</span><br><span class="hljs-keyword">return</span> k + (ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>fa[x] = f; ch[f][k] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that x is not root</span><br><span class="hljs-keyword">int</span> y = fa[x], z = fa[y], w = <span class="hljs-built_in">chk</span>(x, k);<br><span class="hljs-built_in">connect</span>(y, w, ch[x][w ^ <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> &amp;&amp; !<span class="hljs-built_in">notroot</span>(y, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">connect</span>(z, <span class="hljs-built_in">chk</span>(y), x);<br><span class="hljs-built_in">connect</span>(x, w ^ <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushpath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-built_in">pushpath</span>(fa[x], k);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// 0 to real, 2 to virtual</span><br><span class="hljs-built_in">pushpath</span>(x, k);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-keyword">int</span> y = fa[x];<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(y, k)) <span class="hljs-built_in">rotate</span>(<span class="hljs-built_in">chk</span>(x, k) == <span class="hljs-built_in">chk</span>(y, k) ? y : x, k);<br><span class="hljs-built_in">rotate</span>(x, k);<br>&#125;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x is the root of the virtual Splay </span><br><span class="hljs-keyword">if</span>(!x || !fa[x]) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">vls</span>(x) || !<span class="hljs-built_in">vrs</span>(x)) &#123; <br><span class="hljs-built_in">connect</span>(fa[x], <span class="hljs-number">4</span>, <span class="hljs-built_in">vls</span>(x) | <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(fa[x]);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> lef = <span class="hljs-built_in">vls</span>(x);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vrs</span>(lef)) &#123;<br>lef = <span class="hljs-built_in">vrs</span>(lef);<br>&#125;<br><span class="hljs-built_in">splay</span>(lef, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">connect</span>(lef, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(lef);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-comment">// x -&gt; y</span><br><span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-keyword">if</span>(!ch[y][<span class="hljs-number">4</span>]) &#123;<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">4</span>, x);<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>y = ch[y][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vls</span>(y)) &#123;<br><span class="hljs-built_in">pushdown</span>(y);<br>y = <span class="hljs-built_in">vls</span>(y);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">2</span>, x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x) &#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(y &amp;&amp; <span class="hljs-built_in">rs</span>(x)) &#123;<br><span class="hljs-built_in">pushdown</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">4</span>, <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">del</span>(y);<br><span class="hljs-built_in">ins</span>(<span class="hljs-built_in">rs</span>(x), x);<br>&#125;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(x);<br>y = x;<br>x = <span class="hljs-built_in">getfa</span>(x);<br>&#125;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">access</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">flip</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">ls</span>(x)) &#123;<br>x = <span class="hljs-built_in">ls</span>(x); <span class="hljs-comment">// LCT 保证 rev 标记不会出现在 Splay 根的右子树里 </span><br>&#125;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>fa[<span class="hljs-built_in">ls</span>(x)] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">ls</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-built_in">push_real</span>(y, v);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-keyword">return</span> datr[y];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>val[x] += v;<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), v);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(val[x]) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><br><span class="hljs-keyword">int</span> e[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">gi</span>(), m = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>e[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">gi</span>();<br>e[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>val[i] = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">pushup</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-built_in">link</span>(e[i][<span class="hljs-number">0</span>], e[i][<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">int</span> r = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">while</span>(m--) &#123;<br><span class="hljs-keyword">int</span> op = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123;<br>r = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">6</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">7</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">8</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">lca</span>(x, y) == x) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">cut</span>(x);<br><span class="hljs-built_in">makeroot</span>(y);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).sum);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).sum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>复杂度分析</tag>
      
      <tag>TopTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/19/hello-world/"/>
    <url>/2021/06/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
