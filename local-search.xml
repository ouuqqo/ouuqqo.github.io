<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>势能分析</title>
    <link href="/2021/06/28/new/"/>
    <url>/2021/06/28/new/</url>
    
    <content type="html"><![CDATA[<h2 id="Splay-的复杂度证明"><a href="#Splay-的复杂度证明" class="headerlink" title="Splay 的复杂度证明"></a>Splay 的复杂度证明</h2><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><p>记 $siz(x)$ 表示 x 的子树大小，定义节点的势能函数 $\phi(x)=\log_2(siz(x))$，整棵 Splay 的势能 $\Phi=\sum\limits_{i=1}^n\phi(i)$。</p><h3 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h3><h4 id="单旋"><a href="#单旋" class="headerlink" title="单旋"></a>单旋</h4><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620203903.png" alt=""></p><h4 id="双旋"><a href="#双旋" class="headerlink" title="双旋"></a>双旋</h4><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620204221.png" alt=""></p><p>因为</p><p>所以</p><p>所以</p><p>即</p><p>原式加上上式</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620204701.png" alt=""></p><p>因为</p><p>所以</p><p>所以</p><p>即</p><p>原式加上上式</p><p>双旋势能变化量中的 $-2$ 刚好和两次旋转相抵消， 相当于没有旋转消耗仅增加势能。</p><p>单旋的消耗没有办法被抵消，但仅在终点处进行最多 1 次。</p><p>设一次 splay 的起点为 x，终点为 y，中间的点可以全部消掉，所以势能增量为 $3(\phi(y)-\phi(x))&lt;3\log_2n$。</p><p>因为势能永远 $\ge 0$，初始势能 $\le n\log_2 n$，所以 n 个点的 Splay 进行 m 次 splay 的旋转次数最多为 $(n+3m)\log_2 n+m$。</p><p>时间复杂度 $\mathcal O((n+m)\log n)$。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>找到前驱 splay 到根（$3\log_2 n$），把该点插入到前驱和右儿子之间（$\log_2(siz(x))$），再旋转一下（$\log_2n-\log_2(siz(x))$）。</p><p>旋转次数 $(n+4m)\log_2n+m$，时间复杂度 $O((n+m)\log n)$。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>找到该点 splay 到根（$3\log_2 n$），再找到前驱 splay 到根的右儿子（$3\log_2 n$），把该点右儿子挂到前驱的右儿子上（$\log_2(n-1)-\log_2(siz(x))$），删除该点（$-\log_2n$）。</p><p>旋转次数 $(n+6m)\log_2n+2m$，时间复杂度 $O((n+m)\log n)$。</p><h2 id="Link-Cut-Tree-的复杂度证明"><a href="#Link-Cut-Tree-的复杂度证明" class="headerlink" title="Link Cut Tree 的复杂度证明"></a>Link Cut Tree 的复杂度证明</h2><h3 id="记号-1"><a href="#记号-1" class="headerlink" title="记号"></a>记号</h3><p>$rsz(x)$：辅助树的子树大小，$rsz(x)=rsz(ls(x))+rsz(rs(x))+1$。</p><p>$vsz(x)$：辅助树子树内所有点的所有虚儿子的 $siz$ 之和，$vsz(ls(x))+vsz(rs(x))+\sum\limits_{y\in vs(x)}siz(y)$。</p><p>$siz(x)$：$rsz(x)+vsz(x)$。</p><h3 id="access"><a href="#access" class="headerlink" title="access"></a>access</h3><p>可以发现 access 操作过程中在数棵 Splay 中 splay，类似这样：</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620154612.png" alt=""></p><p>定义势能函数 $\phi(x)=\log_2(siz(x))$，整个 LCT 的势能 $\Phi=\sum\limits_{i=1}^n\phi(i)$。</p><p>那么 splay 的势能增量之和即为 $3(\phi(b)-\phi(a))+3(\phi(d)-\phi(c))+3(\phi(f)-\phi(e))$，注意到我们定义的势能函数包括辅助树子树中所有点的 $siz$ 之和，所以 $\phi(a)\le\phi(b)&lt;\phi(c)\le\phi(d)&lt;\phi(e)\le\phi(f)$，那么全部消去，即得 $3(\phi(f)-\phi(a))&lt;3\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n\log_2 n$，所以 n 个点的 LCT 进行 m 次 access，双旋中的旋转次数最多为 $(n+3m)\log_2n$。</p><p>一次 access 还进行了最多为 splay 次数的单旋和虚实链切换。</p><p>如果 $siz(x)\ge siz(fa(x))$，那么我们称 x 为 $fa(x)$ 的重儿子，$fa(x)$ 的其他儿子为轻儿子。</p><p>定义势能函数 $\delta$ 表示实儿子和重儿子不同的节点个数。</p><p>考虑 access 过程中的一次 splay 后，当前 Splay 的根：</p><ul><li>它是轻儿子，$\delta$ 增量 $\le 1$；</li><li>它是重儿子，$\delta$ 减少 1，虚实链切换的消耗被抵消。</li></ul><p>因为一次 access 只会遇见最多 $\log_2n$ 个轻儿子，所以一次 access 的势能增加量最多为 $\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n$，所以 n 个点的 LCT 进行 m 次 access 的单旋和虚实链切换的次数最多为 $n+m\log_2n$。</p><p>综上，n 个点的 LCT 进行 m 次  access 的旋转次数最多为 $(n+4m)\log_2n+n$，虚实链切换次数最多为 $n+m\log_2n$。</p><p>时间复杂度 $\mathcal O((n+m)\log_2n)$。</p><h2 id="AAA-Tree-的复杂度证明"><a href="#AAA-Tree-的复杂度证明" class="headerlink" title="AAA Tree 的复杂度证明"></a>AAA Tree 的复杂度证明</h2><h3 id="记号-2"><a href="#记号-2" class="headerlink" title="记号"></a>记号</h3><p>$ls(x)$：实 Splay 中的左儿子。</p><p>$rs(x)$：实 Splay 中的右儿子。</p><p>$vls(x)$：虚 Splay 中的左儿子。</p><p>$vrs(x)$：虚 Splay 中的右儿子。</p><p>$vs(x)$：虚儿子。</p><p>$rsz(x)$：实 Splay 中的子树大小，$rsz(x)=rsz(ls(x))+rsz(rs(x))+1$。</p><p>$vsz(x)$：虚 Splay 子树（不含）内所有点的 $siz$ 之和 + 虚儿子的 $siz$ + 实 Splay 子树（不含）中所有内的 $vsz$ 之和，$vsz(x)=siz(vls(x))+siz(vrs(x))+siz(vs(x))+siz(ls(x))+siz(rs(x))$。</p><p>$siz(x)$：$rsz(x)+vsz(x)$。</p><h3 id="access-1"><a href="#access-1" class="headerlink" title="access"></a>access</h3><h4 id="splay-1"><a href="#splay-1" class="headerlink" title="splay"></a>splay</h4><p>可以发现 access 的过程中虚 Splay 和实 Splay 中的 splay 交替进行，类似这样：</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620153821.png" alt=""></p><p>定义节点的势能函数为 $\phi(x)=\log_2(siz(x))$。</p><p>那么 splay 的势能变化量之和即为 $3(\phi(b)-\phi(a))+3(\phi(c)-\phi(b))+3(\phi(e)-\phi(d))+3(\phi(f)-\phi(e))+3(\phi(h)-\phi(g))+3(\phi(i)-\phi(h))$，注意到我们定义的势能函数包括实 Splay 子树中所有点的 $siz$ 之和，所以 $\phi(a)\le \phi(b)\le \phi(c)&lt;\phi(d)\le \phi(e)\le \phi(f)&lt;\phi(g)\le \phi(h)\le \phi(i)$，那么全部消去，即得 $3(\phi(i)-\phi(a))&lt;3\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n\log_2n$，所以 n 个点的 AAA Tree 进行 m 次 access，虚 Splay 中 splay 的旋转次数最多为 $(n+3m)\log_2n$，时间复杂度 $\mathcal O((n+m)\log n)$。</p><h4 id="虚-Splay-中插入-amp-删除"><a href="#虚-Splay-中插入-amp-删除" class="headerlink" title="虚 Splay 中插入 &amp; 删除"></a>虚 Splay 中插入 &amp; 删除</h4><p>将 access 中换右儿子的操作分类处理。</p><ul><li>要换上的右儿子为空：仅将当前的右儿子插入虚 Splay 中，一次 access 仅有一次插入操作；</li><li>当前右儿子为空：仅将要换上的右儿子从虚 Splay 中删除；</li><li>当前右儿子和要换上的右儿子都非空：交换两个节点。</li></ul><p>右儿子为空即为链尾，且操作后链尾数量减少 1，而链尾数量仅可通过 link 操作每次增加 1，所以删除次数不超过 link 次数。</p><p>所以 n 个点的 AAA Tree 进行 m 次 access 的插入、删除次数最多为 n，所含的旋转次数最多为 $12n\log_2n+3n$，时间复杂度 $\mathcal O(n\log n)$。</p><p>综上，旋转次数 $(13n+3m)\log_2n+3n$，时间复杂度 $\mathcal O((n+m)\log n)$。</p><p>一种五叉 AAA Tree 的实现：</p><p><a href="https://vjudge.net/problem/黑暗爆炸-3153">BZOJ 3153 Sone1</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 5 叉 AAA Tree</span><br><span class="hljs-comment">// 常数和 3 叉 AAA Tree 相近但不需要 2 倍空间，代码长度相近 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ldb;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// cannot input -2147483648</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, c = <span class="hljs-built_in">gc</span>();<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(; !<span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(; <span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) x = x * <span class="hljs-number">10</span> + (c &amp; <span class="hljs-number">15</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-number">1u</span> &lt;&lt; <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tag</span> &#123;</span><br><span class="hljs-keyword">int</span> mul, add;<br><span class="hljs-built_in">Tag</span>(): <span class="hljs-built_in">mul</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-built_in">Tag</span>(<span class="hljs-keyword">int</span> mul, <span class="hljs-keyword">int</span> add): <span class="hljs-built_in">mul</span>(mul), <span class="hljs-built_in">add</span>(add) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">exis</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (mul != <span class="hljs-number">1</span> || add != <span class="hljs-number">0</span>); &#125; <br>&#125;;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l * r.mul + r.add;<br>&#125;<br><span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Tag <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tag</span>(l.mul * r.mul, l.add * r.mul + r.add);<br>&#125;<br>Tag&amp; <span class="hljs-keyword">operator</span> += (Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span> &#123;</span><br><span class="hljs-keyword">int</span> siz, sum, mn, mx;<br><span class="hljs-built_in">Data</span>(): <span class="hljs-built_in">siz</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">mn</span>(INF), <span class="hljs-built_in">mx</span>(-INF - <span class="hljs-number">1</span>) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> x): <span class="hljs-built_in">siz</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>(x), <span class="hljs-built_in">mn</span>(x), <span class="hljs-built_in">mx</span>(x) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> siz, <span class="hljs-keyword">int</span> sum, <span class="hljs-keyword">int</span> mn, <span class="hljs-keyword">int</span> mx): <span class="hljs-built_in">siz</span>(siz), <span class="hljs-built_in">sum</span>(sum), <span class="hljs-built_in">mn</span>(mn), <span class="hljs-built_in">mx</span>(mx) &#123;&#125;<br>&#125;;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz + r.siz, l.sum + r.sum, <span class="hljs-built_in">min</span>(l.mn, r.mn), <span class="hljs-built_in">max</span>(l.mx, r.mx));<br>&#125;<br>Data&amp; <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz, l.sum * r.mul + l.siz * r.add, l.mn + r, l.mx + r);<br>&#125;<br>Data <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">if</span>(!l.siz) <span class="hljs-keyword">return</span> l;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><br><span class="hljs-keyword">int</span> fa[N], ch[N][<span class="hljs-number">5</span>], val[N], rev[N];<br>Data datr[N], datv[N];<br>Tag tagr[N], tagv[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls(x) ch[x][0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs(x) ch[x][1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vls(x) ch[x][2]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vrs(x) ch[x][3]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vs(x) ch[x][4]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sum(x) (datr[x] + datv[x])</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x != 0</span><br>datr[x] = datr[<span class="hljs-built_in">ls</span>(x)] + datr[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">Data</span>(val[x]);<br>datv[x] = datv[<span class="hljs-built_in">ls</span>(x)] + datv[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vls</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vrs</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>rev[x] ^= <span class="hljs-number">1</span>;<br><span class="hljs-built_in">swap</span>(<span class="hljs-built_in">ls</span>(x), <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_real</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>val[x] += v;<br>datr[x] += v;<br>tagr[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_virt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>datv[x] += v;<br>tagv[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_all</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">push_real</span>(x, v);<br><span class="hljs-built_in">push_virt</span>(x, v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(rev[x]) &#123;<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">ls</span>(x));<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">rs</span>(x));<br>rev[x] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tagr[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">ls</span>(x), tagr[x]);<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">rs</span>(x), tagr[x]);<br>tagr[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(tagv[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">ls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">rs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vrs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), tagv[x]);<br>tagv[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">notroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (ch[fa[x]][k] == x || ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br><span class="hljs-keyword">if</span>(ch[fa[x]][i] == x) <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that fa[x] != 0</span><br><span class="hljs-keyword">return</span> k + (ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>fa[x] = f; ch[f][k] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that x is not root</span><br><span class="hljs-keyword">int</span> y = fa[x], z = fa[y], w = <span class="hljs-built_in">chk</span>(x, k);<br><span class="hljs-built_in">connect</span>(y, w, ch[x][w ^ <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> &amp;&amp; !<span class="hljs-built_in">notroot</span>(y, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">connect</span>(z, <span class="hljs-built_in">chk</span>(y), x);<br><span class="hljs-built_in">connect</span>(x, w ^ <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushpath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-built_in">pushpath</span>(fa[x], k);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// 0 to real, 2 to virtual</span><br><span class="hljs-built_in">pushpath</span>(x, k);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-keyword">int</span> y = fa[x];<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(y, k)) <span class="hljs-built_in">rotate</span>(<span class="hljs-built_in">chk</span>(x, k) == <span class="hljs-built_in">chk</span>(y, k) ? y : x, k);<br><span class="hljs-built_in">rotate</span>(x, k);<br>&#125;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x is the root of the virtual Splay </span><br><span class="hljs-keyword">if</span>(!x || !fa[x]) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">vls</span>(x) || !<span class="hljs-built_in">vrs</span>(x)) &#123; <br><span class="hljs-built_in">connect</span>(fa[x], <span class="hljs-number">4</span>, <span class="hljs-built_in">vls</span>(x) | <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(fa[x]);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> lef = <span class="hljs-built_in">vls</span>(x);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vrs</span>(lef)) &#123;<br>lef = <span class="hljs-built_in">vrs</span>(lef);<br>&#125;<br><span class="hljs-built_in">splay</span>(lef, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">connect</span>(lef, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(lef);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-comment">// x -&gt; y</span><br><span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-keyword">if</span>(!ch[y][<span class="hljs-number">4</span>]) &#123;<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">4</span>, x);<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>y = ch[y][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vls</span>(y)) &#123;<br><span class="hljs-built_in">pushdown</span>(y);<br>y = <span class="hljs-built_in">vls</span>(y);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">2</span>, x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x) &#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(y &amp;&amp; <span class="hljs-built_in">rs</span>(x)) &#123; <span class="hljs-comment">// 交换两个点，单 log 的关键</span><br><span class="hljs-built_in">pushdown</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">4</span>, <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">del</span>(y);<br><span class="hljs-built_in">ins</span>(<span class="hljs-built_in">rs</span>(x), x);<br>&#125;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(x);<br>y = x;<br>x = <span class="hljs-built_in">getfa</span>(x);<br>&#125;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">access</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">flip</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">ls</span>(x)) &#123;<br>x = <span class="hljs-built_in">ls</span>(x); <span class="hljs-comment">// LCT 保证 rev 标记不会出现在 Splay 根的右子树里 </span><br>&#125;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>fa[<span class="hljs-built_in">ls</span>(x)] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">ls</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-built_in">push_real</span>(y, v);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-keyword">return</span> datr[y];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>val[x] += v;<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), v);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(val[x]) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><br><span class="hljs-keyword">int</span> e[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">gi</span>(), m = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>e[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">gi</span>();<br>e[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>val[i] = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">pushup</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-built_in">link</span>(e[i][<span class="hljs-number">0</span>], e[i][<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">int</span> r = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">while</span>(m--) &#123;<br><span class="hljs-keyword">int</span> op = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123;<br>r = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">6</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">7</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">8</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">lca</span>(x, y) == x) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">cut</span>(x);<br><span class="hljs-built_in">makeroot</span>(y);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).sum);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).sum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zhouzhendong/p/JunTanFenXi.html">均摊分析 学习笔记 - zzd233 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂度分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>Splay</tag>
      
      <tag>Link Cut Tree</tag>
      
      <tag>Top Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成函数</title>
    <link href="/2021/06/22/sheng-cheng-han-shu/"/>
    <url>/2021/06/22/sheng-cheng-han-shu/</url>
    
    <content type="html"><![CDATA[<h2 id="形式幂级数"><a href="#形式幂级数" class="headerlink" title="形式幂级数"></a>形式幂级数</h2><p>记 $\sum\limits_{i=0}^\infty a_ix^i$ 为形式幂级数，可以发现形式幂级数的所有初等函数都和多项式的形式相同。</p><p>虽然形式幂级数仅在 $x\in(-1,1)$ 收敛，但是 $x$ 只是占位符，我们只是希望能像多项式一样对数列进行方便的运算，并不关心 $x$ 具体的值。</p><p>有一类组合对象 $A$，$A$ 中的每个对象都有一个叫做大小的自然数。对于每个 $n$ ，大小为 $n$ 的对象数量都是有限的，记为 $a_n$。</p><p>普通生成函数（ordinary generating function，OGF）：$A(x)=\sum\limits_{i=0}^\infty a_ix^i$。</p><p>指数生成函数（exponential generating function，EGF）：$A(x)=\sum\limits_{i=0}^\infty a_i\dfrac{x^i}{i!}$。</p><h2 id="普通生成函数"><a href="#普通生成函数" class="headerlink" title="普通生成函数"></a>普通生成函数</h2><p>普通生成函数描述无标号对象的数量，满足以下运算。</p><h4 id="无交并"><a href="#无交并" class="headerlink" title="无交并"></a>无交并</h4><p>$size(a)=size(b)=size(c)$</p><script type="math/tex; mode=display">A=B\cup C\Rightarrow A(x)=B(x)+C(x)</script><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><p>$size(a)=size(b)+size(c)$</p><script type="math/tex; mode=display">A=B\times C\Rightarrow A(x)=B(x)\cdot C(x)</script><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>从 $B$ 中取出任意多个对象做笛卡尔积，即 $\varnothing\cup B\cup B\times B\cup B^3\cup…$</p><script type="math/tex; mode=display">A=B^*\Rightarrow A(x)=\frac1{1-B(x)}</script><h4 id="环"><a href="#环" class="headerlink" title="环"></a>环</h4><p>从 $B$ 中取出若干个对象排成环（循环同构），环的大小为每个对象的大小之和。</p><script type="math/tex; mode=display">A=CYC(B)\Rightarrow A(x)=\sum_{k=1}^\infty\frac{\varphi(k)}k\ln\frac1{1-B(x^k)}</script><div class="note note-success">            <p><strong>证明</strong></p><p>序列：</p><script type="math/tex; mode=display">1+B(x)+B(x)^2+\ldots=\frac1{1-B(x)}</script><p>环：</p><p>对于 $k$ 个元素的环，由 Pólya 定理，其 OGF 为</p><script type="math/tex; mode=display">\begin{aligned}&\frac1k\sum_{i=0}^{k-1}A(x^\frac k{\gcd(k,i)})^{\gcd(k,i)}\\=&\frac1k\sum_{d\mid k}A(x^\frac kd)^d\sum_{i=1}^k[gcd(k,i)=d]\\=&\frac1k\sum_{d\mid k}A(x^\frac kd)^d\sum_{i=1}^\frac kd[gcd(\frac kd,i)=1]\\=&\frac1k\sum_{d\mid k}A(x^\frac kd)^d\varphi(\frac kd)\\=&\frac1k\sum_{d\mid k}A(x^d)^\frac kd\varphi(d)\\\end{aligned}</script><p>枚举 $k$ 得到</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{k=1}^\infty\frac1k\sum_{d\mid k}\varphi(d)A(x^d)^\frac kd\\=&\sum_{d=1}^\infty\varphi(d)\sum_{k=1}^\infty\frac1{kd}A(x^d)^k\\=&-\sum_{d=1}^\infty\frac{\varphi(d)}d\ln(1-A(x^d))\end{aligned}</script>          </div><h2 id="指数生成函数"><a href="#指数生成函数" class="headerlink" title="指数生成函数"></a>指数生成函数</h2><p>指数生成函数描述有标号对象的数量，满足以下运算。</p><h4 id="无交并-1"><a href="#无交并-1" class="headerlink" title="无交并"></a>无交并</h4><script type="math/tex; mode=display">A(x)=B(x)+C(x)</script><h4 id="笛卡尔积-1"><a href="#笛卡尔积-1" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><p>因为描述的是有标号对象，做笛卡尔积的时候需要乘一个组合数分配标号，即：</p><script type="math/tex; mode=display">\begin{aligned}a_k&=\sum_{i=0}^k\binom kib_ic_{k-i}\\\frac{a_k}{k!}&=\sum_{i=0}^k\frac{b_i}{i!}\frac{c_{k-i}}{(k-i)!}\end{aligned}</script><p>可以发现我们的指数生成函数定义刚好在做笛卡尔积的时候自动分配了标号。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><script type="math/tex; mode=display">A(x)=\sum_{k=0}^\infty\frac{B^k(x)}{k!}=\exp(B(x))</script><h4 id="环-1"><a href="#环-1" class="headerlink" title="环"></a>环</h4><script type="math/tex; mode=display">A(x)=\sum_{k=1}^\infty\frac{B^k(x)}k=-\ln(1-B(x))</script>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>计数</tag>
      
      <tag>生成函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合数学</title>
    <link href="/2021/06/22/zu-he-shu-xue/"/>
    <url>/2021/06/22/zu-he-shu-xue/</url>
    
    <content type="html"><![CDATA[<p><em>除特殊说明外，本文希腊字母表示实数，英文字母表示正整数。</em></p><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>组合数</p><script type="math/tex; mode=display">\binom nm=\frac{n!}{m!(n-m)!}</script><p>广义组合数</p><script type="math/tex; mode=display">\binom\alpha k=\frac{\alpha^\underline k}{k!}=\frac{\alpha(\alpha-1)\ldots(\alpha-k+1)}{k!}</script><p>多重组合数</p><script type="math/tex; mode=display">\binom n{a_1,a_2,\ldots,a_k}=\frac{n!}{a_1!a_2!\ldots a_k!}</script><h3 id="组合恒等式"><a href="#组合恒等式" class="headerlink" title="组合恒等式"></a>组合恒等式</h3><script type="math/tex; mode=display">\begin{aligned}&\binom nm\binom mk=\binom nk\binom{n-k}{m-k}\\&\sum_{i=0}^n\binom ni=2^n\\&\sum_{i=0}^k\binom{n+i-1}i=\binom{n+k}k\\&\sum_{i=m}^n\binom ia=\binom{n+1}{a+1}-\binom m{a+1}\\&\sum_{i=m}^n\binom{a+i}i=\binom{a+n+1}{n}-\binom{a+m}{m-1}\\&\sum_{i=0}^n\binom ni^2=\binom{2n}n\\&\sum_{i=0}^k\binom ni\binom m{k-i}=\binom{n+m}k\\&\binom{n+k}k^2=\sum_{i=0}^k\binom kj^2\binom{n+2k-i}{2k}\end{aligned}</script><div class="note note-secondary">            <p>更多：<a href="https://www.wikiwand.com/zh-cn/二項式係數">二项式系数 - Wikiwand</a></p>          </div><h3 id="帕斯卡法则"><a href="#帕斯卡法则" class="headerlink" title="帕斯卡法则"></a>帕斯卡法则</h3><script type="math/tex; mode=display">\binom{n-1}k+\binom{n-1}{k-1}=\binom nk</script><p>推广：</p><script type="math/tex; mode=display">\binom{n-1}{k_1-1,k_2,\ldots,k_m}+\binom{n-1}{k_1,k_2-1,\ldots,k_m}+\cdots+\binom{n-1}{k_1,k_2,\ldots,k_m-1}=\binom n{k_1,k_2,\ldots,k_m}</script><div class="note note-secondary">            <p>证明：<a href="https://www.wikiwand.com/zh-hans/帕斯卡法則">帕斯卡法则 - Wikiwand</a></p>          </div><h3 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h3><script type="math/tex; mode=display">(a+b)^n=\sum_{i=0}^n\binom nia^ib^{n-i}</script><p>广义二项式定理：</p><script type="math/tex; mode=display">(a+b)^\alpha=\sum_{i=0}^\infty\binom\alpha ia^ib^{n-i}</script><p>推广（多项式定理）：</p><script type="math/tex; mode=display">(x_1+x_2+\ldots+x_n)^k=\sum_{a_1+a_2+\ldots+a_n=k}\binom k{a_1,a_2,\ldots,a_n}{x_1}^{a_1}{x_2}^{a_2}\ldots{x_n}^{a_n}</script><div class="note note-secondary">            <p>证明：<a href="https://www.wikiwand.com/zh-hans/二项式定理">二项式定理 - Wikiwand</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>组合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub Actions 搭建博客</title>
    <link href="/2021/06/20/Hexo+GitHub-Actions-da-jian-bo-ke/"/>
    <url>/2021/06/20/Hexo+GitHub-Actions-da-jian-bo-ke/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>官网：<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p><p>装好后在 cmd 输入 <code>node -v</code> 和 <code>npm -v</code>，出现版本号即安装成功。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>官网：<a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p><p>装好后在 cmd 输入 <code>git --version</code>，出现版本号即安装成功。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>在 cmd 输入 <code>npm i hexo-cli -g</code> 安装 Hexo，装好后输入 <code>hexo -v</code> ，出现版本号即安装成功。</p><h3 id="搭建博客-1"><a href="#搭建博客-1" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>找个地方新建文件夹，在该文件夹打开 cmd 输入 <code>hexo init</code> 初始化文件夹，接着输入 <code>npm install</code> 安装必备的组件。</p><p>输入 <code>hexo s</code>，在浏览器打开 <a href="http://localhost:4000/">localhost:4000/</a> 即可预览博客。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>把 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题下载解压到 <code>\themes</code> 文件夹，按照主题文档完成相关配置，包括数学公式，文章排序等。</p><p>新建 <code>\source\css\custom.css</code> 文件夹可以自定义 css。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>在博客根目录打开 cmd 输入</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs npm">npm i hexo-generator-sitemap --save<br>npm i hexo-generator-baidu-sitemap --save<br></code></pre></div></td></tr></table></figure><p>安装插件，然后打开 <code>\_config.yml</code> 在最后加入</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">Plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-sitemap</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-baidu-sitemap</span><br><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br><span class="hljs-attr">baidusitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidusitemap.xml</span><br></code></pre></div></td></tr></table></figure><p>之后博客就会慢慢被 Google 和 Baidu 收录了。</p><h3 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h3><p>在博客根目录打开 cmd 输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm i hexo-blog-encrypt --save<br></code></pre></div></td></tr></table></figure><p>安装 encrypt 插件，然后打开 <code>\_config.yml</code> 在最后加入</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">encrypt:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">&quot;此文章已被加密。&quot;</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;输入密码以查看文章。&quot;</span><br></code></pre></div></td></tr></table></figure><p>之后在博客的 Front-matter 区域加入</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">password: <br></code></pre></div></td></tr></table></figure><p>即可设置密码。</p><h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p>打开 <code>\_config.yml</code> 文件，修改最后一行的 <code>deploy</code> 配置，因为要使用 GitHub Actions 发布所以 <code>repo</code> 只能使用 ssh 格式。</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:ouuqqo/ouuqqo.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>打开 <code>\scaffolds\post.md</code> 文件修改 post 模板：</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>index<span class="hljs-emphasis">_img: </span><br><span class="hljs-emphasis">banner_</span>img: <br>sticky: <br>categories: <br>tags: <br>excerpt: <br></code></pre></div></td></tr></table></figure><p>注意提交时如果有某项为空需要删去。</p><h3 id="快捷创建"><a href="#快捷创建" class="headerlink" title="快捷创建"></a>快捷创建</h3><p>在博客根目录新建 <code>_new post.bat</code>，输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">hexo new _new<br></code></pre></div></td></tr></table></figure><p>双击 <code>_new post.bat</code> 即可新建文章。</p><h2 id="使用-GitHub-Actions-自动发布"><a href="#使用-GitHub-Actions-自动发布" class="headerlink" title="使用 GitHub Actions 自动发布"></a>使用 GitHub Actions 自动发布</h2><p>GitHub 博客源文件仅存放在本地，非常不安全。通过 GitHub Actions 可以将一个仓库的文件自动部署到另一个仓库，更新时只需 push 到源仓库即可，</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ol><li>创建 private 仓库 <code>blog</code> 存放博客源文件</li><li>创建 public 仓库 <code>ouuqqo.github.io</code> 用来存放静态博客页面。</li></ol><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h3><p>在博客根目录打开 cmd 输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">ssh-keygen -f github-deploy-key<br></code></pre></div></td></tr></table></figure><p>一路回车直到生成成功，当前目录下会有 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p><h3 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h3><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ol><li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ol><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>ouuqqo.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ol><li>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li><li>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li><li>勾选 <code>Allow write access</code> 选项。</li></ol><h3 id="编写-GitHub-Actions"><a href="#编写-GitHub-Actions" class="headerlink" title="编写 GitHub Actions"></a>编写 GitHub Actions</h3><p>在 <code>blog</code> 仓库找到 <code>Actions</code> 页面点击 <code>set up a workflow yourself</code> 创建一个 GitHub Action，在 <code>main.yml</code> 文件中粘贴以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">HEXO</span> <span class="hljs-string">CI</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">ouuqqo</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">ouuqqo@gmail.com</span><br>  <span class="hljs-attr">DEPLOY_REPO:</span> <span class="hljs-string">ouuqqo/ouuqqo.github.io</span><br>  <span class="hljs-attr">DEPLOY_BRANCH:</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">14.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name $GIT_USER</span><br><span class="hljs-string">          git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br></code></pre></div></td></tr></table></figure><p>大概意思是当 <code>blog</code> 仓库接受到新 <code>push</code> 时就编译出静态网页发布到 <code>ouuqqo.github.io</code> 仓库。</p><h2 id="将博客同步到-GitHub"><a href="#将博客同步到-GitHub" class="headerlink" title="将博客同步到 GitHub"></a>将博客同步到 GitHub</h2><h3 id="与-GitHub-建立连接"><a href="#与-GitHub-建立连接" class="headerlink" title="与 GitHub 建立连接"></a>与 GitHub 建立连接</h3><p>在 cmd 输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git config --global user.name &quot;ouuqqo&quot;<br>git config --global user.email &quot;ouuqqo@gmail.com&quot;<br></code></pre></div></td></tr></table></figure><p>设置好 GitHub 用户名和注册邮箱。</p><p>然后生成 SSH key</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">ssh-keygen -t rsa -C &quot;ouuqqo@gmail.com&quot;<br></code></pre></div></td></tr></table></figure><p>打开 <a href="github.com">GitHub</a> 点击个人头像 <code>Settings -&gt; SSH and GPG keys</code>，点击 <code>New SSH key</code>。</p><p>打开 <code>C:\Users\Administrator\.ssh\id_rsa.pub</code>，将内容复制到 <code>Key</code> 框中，<code>Title</code> 框随便填写，点击确定。</p><p>输入 <code>ssh -T git@github.com</code>，出现用户名即成功。</p><h3 id="同步到-GitHub"><a href="#同步到-GitHub" class="headerlink" title="同步到 GitHub"></a>同步到 GitHub</h3><p>在博客根目录打开 cmd 输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git init<br></code></pre></div></td></tr></table></figure><p>预处理 git，可以看到一个隐藏的 <code>\.git</code> 文件夹。</p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git remote origin https://github.com/ouuqqo/blog.git<br></code></pre></div></td></tr></table></figure><p>创建名为 origin 的远程仓库。</p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git pull origin master<br></code></pre></div></td></tr></table></figure><p>从 <code>origin</code> 仓库 <code>master</code> 拉取到本地仓库。</p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git add .<br></code></pre></div></td></tr></table></figure><p>将博客根目录所有需要的文件添加到暂存区。</p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git commit --allow-empty-message -m &quot;&quot;<br></code></pre></div></td></tr></table></figure><p>将暂存区写入本地仓库</p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git push origin master<br></code></pre></div></td></tr></table></figure><p>将本地仓库同步到 <code>origin</code> 仓库 <code>master</code> 分支。</p><p>打开 <code>blog</code> 仓库 <code>Actions</code> 页面即可看到名为 <code>HEXO CI</code> 的 Action，部署完成后打开 <a href="https://ouuqqo.github.io">ouuqqo.github.io</a> 即可看到博客内容。</p><h3 id="快捷同布"><a href="#快捷同布" class="headerlink" title="快捷同布"></a>快捷同布</h3><p>在博客根目录新建 <code>_push.bat</code>，输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git add .<br>git commit --allow-empty-message -m &quot;&quot;<br>git push origin master<br><span class="hljs-built_in">pause</span><br></code></pre></div></td></tr></table></figure><p>双击 <code>_push.bat</code> 即可同布。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>GitHub Actions 中的 <code>npm install</code> 命令即为安装 <code>package-lock.json</code> 中的全部模块，所以在使用 <code>npm</code> 安装和卸载插件时应加入 <code>--save</code> 参数将模块信息保存到 <code>package-lock.json</code>。</p><p>更改了 <code>blog</code> 仓库中的内容后会出现本地和远程仓库不对应，此时应先用</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">git pull origin master<br></code></pre></div></td></tr></table></figure><p>拉取远程仓库的更新再同步。</p><p>任何更新后都应先用 <code>hexo clean</code> 清除缓存再用 <code>hexo s</code> 预览博客。</p><p><code>npm list --depth=0</code> 可以查看安装的所有包（不含依赖）。</p><p>更换设备只需要重新进行一次 <a href="https://ouuqqo.github.io/2021/06/20/Hexo+Github-Actions-da-jian-ge-ren-bo-ke/#%E5%B0%86%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E5%88%B0-github">将博客同步到 GitHub</a> 即可，如果需要本地预览则需要使用 <code>npm install</code> 先安装 Hexo 相关组件。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程 - 知乎 (zhihu.com)</a></p><p><a href="https://eericzeng.github.io/2019/07/14/hexo博客站点sitemap的使用/">hexo博客站点sitemap的使用 | EricZeng (eericzeng.github.io)</a></p><p><a href="https://www.jianshu.com/p/44e211829447">hexo文章加密 - 简书 (jianshu.com)</a></p><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客 | Sanonz</a></p><p><a href="https://hdj.me/github-actions-hexo-cicd/">如何正确的使用 GitHub Actions 实现 Hexo 博客的 CICD | 喵了个咪 (hdj.me)</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>势能分析</title>
    <link href="/2021/06/19/shi-neng-fen-xi/"/>
    <url>/2021/06/19/shi-neng-fen-xi/</url>
    
    <content type="html"><![CDATA[<h2 id="Splay-的复杂度证明"><a href="#Splay-的复杂度证明" class="headerlink" title="Splay 的复杂度证明"></a>Splay 的复杂度证明</h2><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><p>记 $siz(x)$ 表示 x 的子树大小，定义节点的势能函数 $\phi(x)=\log_2(siz(x))$，整棵 Splay 的势能 $\Phi=\sum\limits_{i=1}^n\phi(i)$。</p><h3 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h3><h4 id="单旋"><a href="#单旋" class="headerlink" title="单旋"></a>单旋</h4><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620203903.png" alt=""></p><script type="math/tex; mode=display">\begin{aligned}\Delta\Phi&=\phi'(x)+\phi'(y)-\phi(x)-\phi(y)\\&=\phi'(y)-\phi(x)\\&<\phi'(x)-\phi(x)\end{aligned}</script><h4 id="双旋"><a href="#双旋" class="headerlink" title="双旋"></a>双旋</h4><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620204221.png" alt=""></p><script type="math/tex; mode=display">\begin{aligned}\Delta\Phi&=\phi'(x)+\phi'(y)+\phi'(z)-\phi(x)-\phi(y)-\phi(z)\\&=\phi'(y)+\phi'(z)-\phi(x)-\phi(y)\\&<\phi'(x)+\phi'(z)-2\phi(x)\end{aligned}</script><p>因为</p><script type="math/tex; mode=display">siz(x)+siz'(z)=2+siz(A)+siz(B)+siz(C)+siz(D)<siz'(x)</script><p>所以</p><script type="math/tex; mode=display">siz(x)siz'(z)<\frac14siz'(x)^2</script><p>所以</p><script type="math/tex; mode=display">\phi(x)+\phi'(z)-2\phi'(x)=\log_2\left(\frac{siz(x)siz'(z)}{siz'(x)^2}\right)<\log_2(\frac14)=-2</script><p>即</p><script type="math/tex; mode=display">-(\phi(x)+\phi'(z)-2\phi'(x))-2>0</script><p>原式加上上式</p><script type="math/tex; mode=display">\Delta\Phi<\phi'(x)+\phi'(z)-2\phi(x)-(\phi(x)+\phi'(z)-2\phi'(x))-2=3(\phi'(x)-\phi(x))-2</script><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620204701.png" alt=""></p><script type="math/tex; mode=display">\begin{aligned}\Delta\Phi&=\phi'(x)+\phi'(y)+\phi'(z)-\phi(x)-\phi(y)-\phi(z)\\&=\phi'(y)+\phi'(z)-\phi(x)-\phi(y)\\&<\phi'(y)+\phi'(z)-2\phi(x)\end{aligned}</script><p>因为</p><script type="math/tex; mode=display">siz'(y)+siz'(z)<siz'(x)</script><p>所以</p><script type="math/tex; mode=display">siz'(y)siz'(z)<\frac14siz'(x)^2</script><p>所以</p><script type="math/tex; mode=display">\phi'(y)+\phi'(z)-2\phi'(x)=\log_2\left(\frac{siz'(y)siz'(z)}{siz'(x)^2}\right)<\log_2\left(\frac14\right)=-2</script><p>即</p><script type="math/tex; mode=display">-(\phi'(y)+\phi'(z)-2\phi'(x))-2>0</script><p>原式加上上式</p><script type="math/tex; mode=display">\Delta\Phi<\phi'(y)+\phi'(z)-2\phi(x)-(\phi'(y)+\phi'(z)-2\phi'(x))-2=2(\phi'(x)-\phi(x))-2</script><p>双旋势能变化量中的 $-2$ 刚好和两次旋转相抵消， 相当于没有旋转消耗仅增加势能。</p><p>单旋的消耗没有办法被抵消，但仅在终点处进行最多 1 次。</p><p>设一次 splay 的起点为 x，终点为 y，中间的点可以全部消掉，所以势能增量为 $3(\phi(y)-\phi(x))&lt;3\log_2n$。</p><p>因为势能永远 $\ge 0$，初始势能 $\le n\log_2 n$，所以 n 个点的 Splay 进行 m 次 splay 的旋转次数最多为 $(n+3m)\log_2 n+m$。</p><p>时间复杂度 $\mathcal O((n+m)\log n)$。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>找到前驱 splay 到根（$3\log_2 n$），把该点插入到前驱和右儿子之间（$\log_2(siz(x))$），再旋转一下（$\log_2n-\log_2(siz(x))$）。</p><p>旋转次数 $(n+4m)\log_2n+m$，时间复杂度 $O((n+m)\log n)$。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>找到该点 splay 到根（$3\log_2 n$），再找到前驱 splay 到根的右儿子（$3\log_2 n$），把该点右儿子挂到前驱的右儿子上（$\log_2(n-1)-\log_2(siz(x))$），删除该点（$-\log_2n$）。</p><p>旋转次数 $(n+6m)\log_2n+2m$，时间复杂度 $O((n+m)\log n)$。</p><h2 id="Link-Cut-Tree-的复杂度证明"><a href="#Link-Cut-Tree-的复杂度证明" class="headerlink" title="Link Cut Tree 的复杂度证明"></a>Link Cut Tree 的复杂度证明</h2><h3 id="记号-1"><a href="#记号-1" class="headerlink" title="记号"></a>记号</h3><p>$rsz(x)$：辅助树的子树大小，$rsz(x)=rsz(ls(x))+rsz(rs(x))+1$。</p><p>$vsz(x)$：辅助树子树内所有点的所有虚儿子的 $siz$ 之和，$vsz(ls(x))+vsz(rs(x))+\sum\limits_{y\in vs(x)}siz(y)$。</p><p>$siz(x)$：$rsz(x)+vsz(x)$。</p><h3 id="access"><a href="#access" class="headerlink" title="access"></a>access</h3><p>可以发现 access 操作过程中在数棵 Splay 中 splay，类似这样：</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620154612.png" alt=""></p><p>定义势能函数 $\phi(x)=\log_2(siz(x))$，整个 LCT 的势能 $\Phi=\sum\limits_{i=1}^n\phi(i)$。</p><p>那么 splay 的势能增量之和即为 $3(\phi(b)-\phi(a))+3(\phi(d)-\phi(c))+3(\phi(f)-\phi(e))$，注意到我们定义的势能函数包括辅助树子树中所有点的 $siz$ 之和，所以 $\phi(a)\le\phi(b)&lt;\phi(c)\le\phi(d)&lt;\phi(e)\le\phi(f)$，那么全部消去，即得 $3(\phi(f)-\phi(a))&lt;3\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n\log_2 n$，所以 n 个点的 LCT 进行 m 次 access，双旋中的旋转次数最多为 $(n+3m)\log_2n$。</p><p>一次 access 还进行了最多为 splay 次数的单旋和虚实链切换。</p><p>如果 $siz(x)\ge siz(fa(x))$，那么我们称 x 为 $fa(x)$ 的重儿子，$fa(x)$ 的其他儿子为轻儿子。</p><p>定义势能函数 $\delta$ 表示实儿子和重儿子不同的节点个数。</p><p>考虑 access 过程中的一次 splay 后，当前 Splay 的根：</p><ul><li>它是轻儿子，$\delta$ 增量 $\le 1$；</li><li>它是重儿子，$\delta$ 减少 1，虚实链切换的消耗被抵消。</li></ul><p>因为一次 access 只会遇见最多 $\log_2n$ 个轻儿子，所以一次 access 的势能增加量最多为 $\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n$，所以 n 个点的 LCT 进行 m 次 access 的单旋和虚实链切换的次数最多为 $n+m\log_2n$。</p><p>综上，n 个点的 LCT 进行 m 次  access 的旋转次数最多为 $(n+4m)\log_2n+n$，虚实链切换次数最多为 $n+m\log_2n$。</p><p>时间复杂度 $\mathcal O((n+m)\log_2n)$。</p><h2 id="AAA-Tree-的复杂度证明"><a href="#AAA-Tree-的复杂度证明" class="headerlink" title="AAA Tree 的复杂度证明"></a>AAA Tree 的复杂度证明</h2><h3 id="记号-2"><a href="#记号-2" class="headerlink" title="记号"></a>记号</h3><p>$ls(x)$：实 Splay 中的左儿子。</p><p>$rs(x)$：实 Splay 中的右儿子。</p><p>$vls(x)$：虚 Splay 中的左儿子。</p><p>$vrs(x)$：虚 Splay 中的右儿子。</p><p>$vs(x)$：虚儿子。</p><p>$rsz(x)$：实 Splay 中的子树大小，$rsz(x)=rsz(ls(x))+rsz(rs(x))+1$。</p><p>$vsz(x)$：虚 Splay 子树（不含）内所有点的 $siz$ 之和 + 虚儿子的 $siz$ + 实 Splay 子树（不含）中所有内的 $vsz$ 之和，$vsz(x)=siz(vls(x))+siz(vrs(x))+siz(vs(x))+siz(ls(x))+siz(rs(x))$。</p><p>$siz(x)$：$rsz(x)+vsz(x)$。</p><h3 id="access-1"><a href="#access-1" class="headerlink" title="access"></a>access</h3><h4 id="splay-1"><a href="#splay-1" class="headerlink" title="splay"></a>splay</h4><p>可以发现 access 的过程中虚 Splay 和实 Splay 中的 splay 交替进行，类似这样：</p><p><img src="https://cdn.jsdelivr.net/gh/ouuqqo/ImageHosting/images/20210620153821.png" alt=""></p><p>定义节点的势能函数为 $\phi(x)=\log_2(siz(x))$。</p><p>那么 splay 的势能变化量之和即为 $3(\phi(b)-\phi(a))+3(\phi(c)-\phi(b))+3(\phi(e)-\phi(d))+3(\phi(f)-\phi(e))+3(\phi(h)-\phi(g))+3(\phi(i)-\phi(h))$，注意到我们定义的势能函数包括实 Splay 子树中所有点的 $siz$ 之和，所以 $\phi(a)\le \phi(b)\le \phi(c)&lt;\phi(d)\le \phi(e)\le \phi(f)&lt;\phi(g)\le \phi(h)\le \phi(i)$，那么全部消去，即得 $3(\phi(i)-\phi(a))&lt;3\log_2n$。</p><p>势能永远 $\ge 0$，初始势能 $\le n\log_2n$，所以 n 个点的 AAA Tree 进行 m 次 access，虚 Splay 中 splay 的旋转次数最多为 $(n+3m)\log_2n$，时间复杂度 $\mathcal O((n+m)\log n)$。</p><h4 id="虚-Splay-中插入-amp-删除"><a href="#虚-Splay-中插入-amp-删除" class="headerlink" title="虚 Splay 中插入 &amp; 删除"></a>虚 Splay 中插入 &amp; 删除</h4><p>将 access 中换右儿子的操作分类处理。</p><ul><li>要换上的右儿子为空：仅将当前的右儿子插入虚 Splay 中，一次 access 仅有一次插入操作；</li><li>当前右儿子为空：仅将要换上的右儿子从虚 Splay 中删除；</li><li>当前右儿子和要换上的右儿子都非空：交换两个节点。</li></ul><p>右儿子为空即为链尾，且操作后链尾数量减少 1，而链尾数量仅可通过 link 操作每次增加 1，所以删除次数不超过 link 次数。</p><p>所以 n 个点的 AAA Tree 进行 m 次 access 的插入、删除次数最多为 n，所含的旋转次数最多为 $12n\log_2n+3n$，时间复杂度 $\mathcal O(n\log n)$。</p><p>综上，旋转次数 $(13n+3m)\log_2n+3n$，时间复杂度 $\mathcal O((n+m)\log n)$。</p><p>一种五叉 AAA Tree 的实现：</p><p><a href="https://vjudge.net/problem/黑暗爆炸-3153">BZOJ 3153 Sone1</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 5 叉 AAA Tree</span><br><span class="hljs-comment">// 常数和 3 叉 AAA Tree 相近但不需要 2 倍空间，代码长度相近 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ldb;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// cannot input -2147483648</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, c = <span class="hljs-built_in">gc</span>();<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(; !<span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(; <span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>()) x = x * <span class="hljs-number">10</span> + (c &amp; <span class="hljs-number">15</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-number">1u</span> &lt;&lt; <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tag</span> &#123;</span><br><span class="hljs-keyword">int</span> mul, add;<br><span class="hljs-built_in">Tag</span>(): <span class="hljs-built_in">mul</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-built_in">Tag</span>(<span class="hljs-keyword">int</span> mul, <span class="hljs-keyword">int</span> add): <span class="hljs-built_in">mul</span>(mul), <span class="hljs-built_in">add</span>(add) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">exis</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (mul != <span class="hljs-number">1</span> || add != <span class="hljs-number">0</span>); &#125; <br>&#125;;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l * r.mul + r.add;<br>&#125;<br><span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">int</span> &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Tag <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Tag</span>(l.mul * r.mul, l.add * r.mul + r.add);<br>&#125;<br>Tag&amp; <span class="hljs-keyword">operator</span> += (Tag &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span> &#123;</span><br><span class="hljs-keyword">int</span> siz, sum, mn, mx;<br><span class="hljs-built_in">Data</span>(): <span class="hljs-built_in">siz</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">mn</span>(INF), <span class="hljs-built_in">mx</span>(-INF - <span class="hljs-number">1</span>) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> x): <span class="hljs-built_in">siz</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>(x), <span class="hljs-built_in">mn</span>(x), <span class="hljs-built_in">mx</span>(x) &#123;&#125;<br><span class="hljs-built_in">Data</span>(<span class="hljs-keyword">int</span> siz, <span class="hljs-keyword">int</span> sum, <span class="hljs-keyword">int</span> mn, <span class="hljs-keyword">int</span> mx): <span class="hljs-built_in">siz</span>(siz), <span class="hljs-built_in">sum</span>(sum), <span class="hljs-built_in">mn</span>(mn), <span class="hljs-built_in">mx</span>(mx) &#123;&#125;<br>&#125;;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz + r.siz, l.sum + r.sum, <span class="hljs-built_in">min</span>(l.mn, r.mn), <span class="hljs-built_in">max</span>(l.mx, r.mx));<br>&#125;<br>Data&amp; <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Data &amp;r) &#123;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br>Data <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(l.siz, l.sum * r.mul + l.siz * r.add, l.mn + r, l.mx + r);<br>&#125;<br>Data <span class="hljs-keyword">operator</span> += (Data &amp;l, <span class="hljs-keyword">const</span> Tag &amp;r) &#123;<br><span class="hljs-keyword">if</span>(!l.siz) <span class="hljs-keyword">return</span> l;<br><span class="hljs-keyword">return</span> l = l + r;<br>&#125;<br><br><span class="hljs-keyword">int</span> fa[N], ch[N][<span class="hljs-number">5</span>], val[N], rev[N];<br>Data datr[N], datv[N];<br>Tag tagr[N], tagv[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls(x) ch[x][0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs(x) ch[x][1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vls(x) ch[x][2]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vrs(x) ch[x][3]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vs(x) ch[x][4]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sum(x) (datr[x] + datv[x])</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x != 0</span><br>datr[x] = datr[<span class="hljs-built_in">ls</span>(x)] + datr[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">Data</span>(val[x]);<br>datv[x] = datv[<span class="hljs-built_in">ls</span>(x)] + datv[<span class="hljs-built_in">rs</span>(x)] + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vls</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vrs</span>(x)) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>rev[x] ^= <span class="hljs-number">1</span>;<br><span class="hljs-built_in">swap</span>(<span class="hljs-built_in">ls</span>(x), <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_real</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>val[x] += v;<br>datr[x] += v;<br>tagr[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_virt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>datv[x] += v;<br>tagv[x] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_all</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">push_real</span>(x, v);<br><span class="hljs-built_in">push_virt</span>(x, v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(rev[x]) &#123;<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">ls</span>(x));<br><span class="hljs-built_in">flip</span>(<span class="hljs-built_in">rs</span>(x));<br>rev[x] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tagr[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">ls</span>(x), tagr[x]);<br><span class="hljs-built_in">push_real</span>(<span class="hljs-built_in">rs</span>(x), tagr[x]);<br>tagr[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(tagv[x].<span class="hljs-built_in">exis</span>()) &#123;<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">ls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_virt</span>(<span class="hljs-built_in">rs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vls</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vrs</span>(x), tagv[x]);<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), tagv[x]);<br>tagv[x] = <span class="hljs-built_in">Tag</span>();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">notroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (ch[fa[x]][k] == x || ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br><span class="hljs-keyword">if</span>(ch[fa[x]][i] == x) <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that fa[x] != 0</span><br><span class="hljs-keyword">return</span> k + (ch[fa[x]][k + <span class="hljs-number">1</span>] == x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>fa[x] = f; ch[f][k] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// assume that x is not root</span><br><span class="hljs-keyword">int</span> y = fa[x], z = fa[y], w = <span class="hljs-built_in">chk</span>(x, k);<br><span class="hljs-built_in">connect</span>(y, w, ch[x][w ^ <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> &amp;&amp; !<span class="hljs-built_in">notroot</span>(y, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">connect</span>(z, <span class="hljs-built_in">chk</span>(y), x);<br><span class="hljs-built_in">connect</span>(x, w ^ <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushpath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-built_in">pushpath</span>(fa[x], k);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span> </span>&#123; <span class="hljs-comment">// 0 to real, 2 to virtual</span><br><span class="hljs-built_in">pushpath</span>(x, k);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">notroot</span>(x, k)) &#123;<br><span class="hljs-keyword">int</span> y = fa[x];<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">notroot</span>(y, k)) <span class="hljs-built_in">rotate</span>(<span class="hljs-built_in">chk</span>(x, k) == <span class="hljs-built_in">chk</span>(y, k) ? y : x, k);<br><span class="hljs-built_in">rotate</span>(x, k);<br>&#125;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-comment">// assume that x is the root of the virtual Splay </span><br><span class="hljs-keyword">if</span>(!x || !fa[x]) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">vls</span>(x) || !<span class="hljs-built_in">vrs</span>(x)) &#123; <br><span class="hljs-built_in">connect</span>(fa[x], <span class="hljs-number">4</span>, <span class="hljs-built_in">vls</span>(x) | <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(fa[x]);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> lef = <span class="hljs-built_in">vls</span>(x);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vrs</span>(lef)) &#123;<br>lef = <span class="hljs-built_in">vrs</span>(lef);<br>&#125;<br><span class="hljs-built_in">splay</span>(lef, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">connect</span>(lef, <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(x));<br><span class="hljs-built_in">pushup</span>(lef);<br>fa[x] = <span class="hljs-built_in">vls</span>(x) = <span class="hljs-built_in">vrs</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-comment">// x -&gt; y</span><br><span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-keyword">if</span>(!ch[y][<span class="hljs-number">4</span>]) &#123;<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">4</span>, x);<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>y = ch[y][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">vls</span>(y)) &#123;<br><span class="hljs-built_in">pushdown</span>(y);<br>y = <span class="hljs-built_in">vls</span>(y);<br>&#125;<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(y, <span class="hljs-number">2</span>, x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x) &#123;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(y &amp;&amp; <span class="hljs-built_in">rs</span>(x)) &#123; <span class="hljs-comment">// 交换两个点，单 log 的关键</span><br><span class="hljs-built_in">pushdown</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushdown</span>(y);<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">2</span>, <span class="hljs-built_in">vls</span>(y));<br><span class="hljs-built_in">connect</span>(<span class="hljs-built_in">rs</span>(x), <span class="hljs-number">3</span>, <span class="hljs-built_in">vrs</span>(y));<br><span class="hljs-built_in">vls</span>(y) = <span class="hljs-built_in">vrs</span>(y) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(<span class="hljs-built_in">rs</span>(x));<br><span class="hljs-built_in">pushup</span>(y);<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">4</span>, <span class="hljs-built_in">rs</span>(x));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">del</span>(y);<br><span class="hljs-built_in">ins</span>(<span class="hljs-built_in">rs</span>(x), x);<br>&#125;<br><span class="hljs-built_in">connect</span>(x, <span class="hljs-number">1</span>, y);<br><span class="hljs-built_in">pushup</span>(x);<br>y = x;<br>x = <span class="hljs-built_in">getfa</span>(x);<br>&#125;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">access</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">flip</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">ls</span>(x)) &#123;<br>x = <span class="hljs-built_in">ls</span>(x); <span class="hljs-comment">// LCT 保证 rev 标记不会出现在 Splay 根的右子树里 </span><br>&#125;<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">makeroot</span>(x);<br><span class="hljs-built_in">access</span>(y);<br><span class="hljs-built_in">splay</span>(y, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>fa[<span class="hljs-built_in">ls</span>(x)] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">ls</span>(x) = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-built_in">push_real</span>(y, v);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querychain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">split</span>(x, y);<br><span class="hljs-keyword">return</span> datr[y];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, Tag v)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br>val[x] += v;<br><span class="hljs-built_in">push_all</span>(<span class="hljs-built_in">vs</span>(x), v);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function">Data <span class="hljs-title">querysubtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">access</span>(x);<br><span class="hljs-built_in">splay</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Data</span>(val[x]) + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">vs</span>(x));<br>&#125;<br><br><span class="hljs-keyword">int</span> e[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">gi</span>(), m = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>e[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">gi</span>();<br>e[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>val[i] = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">pushup</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-built_in">link</span>(e[i][<span class="hljs-number">0</span>], e[i][<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">int</span> r = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">while</span>(m--) &#123;<br><span class="hljs-keyword">int</span> op = <span class="hljs-built_in">gi</span>();<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123;<br>r = <span class="hljs-built_in">gi</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">0</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">modifysubtree</span>(x, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, y));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">6</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>(), z = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">modifychain</span>(x, y, <span class="hljs-built_in">Tag</span>(<span class="hljs-number">1</span>, z));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">7</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mn);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">8</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).mx);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">lca</span>(x, y) == x) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">cut</span>(x);<br><span class="hljs-built_in">makeroot</span>(y);<br><span class="hljs-built_in">ins</span>(x, y);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>(), y = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querychain</span>(x, y).sum);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">makeroot</span>(r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">querysubtree</span>(x).sum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zhouzhendong/p/JunTanFenXi.html">均摊分析 学习笔记 - zzd233 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂度分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>Splay</tag>
      
      <tag>Link Cut Tree</tag>
      
      <tag>Top Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
